#include <Keypad.h>

//Access code
const String CODE = "1234";
//Emergency key
const String EMERGENCYKEY = "***";
//Normal distance to closed room door in cm
const int NORM_DIST = 15;
//Error bound for a closed door in cm
const int ERROR = 5;
//Time to leave the room in seconds
const int EXIT_TIME = 10;
//Time to input code into keypad
const int INPUT_CODE_TIME = 30;

//Initialize timer global variables
unsigned long startTime;
unsigned long currTime;
//Initialize room-state global variable as if you're outside the room
boolean insideRoom = false;

//Initialize pin global variables
int buzzerPin = 5;  // Buzzer pin number
int echoPin   = 6;  // Ultrasonic Sensor echo pin number
int trigPin   = 7;  // Ultrasonic Sensor trigger pin number
int greenLed  = 11; // Green LED pin number
int redLed    = 12; // Red LED pin number

//Keypad setup
const byte ROWS = 4;
const byte COLS = 3;
byte R1 = A0; // Row one (Top most row containing: 1 2 3)
byte R2 = A1; // Row two 
byte R3 = A2; // Row three
byte R4 = A3; // Row four (Bottom most row containing: * 0 #)
byte C1 = 8;  // Column one (Left most column: 1 4 7 *)
byte C2 = 9;  // Column two
byte C3 = 10; // Column three (Right most column: 3 6 9 #)
char hexaKeys[ROWS][COLS] = {
  {'1', '2', '3'},
  {'4', '5', '6'},
  {'7', '8', '9'},
  {'*', '0', '#'}};
byte rowPins[ROWS] = {R1, R2, R3, R4};
byte colPins[COLS] = {C1, C2, C3};
Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);

// Setup code runs only once
void setup() { 
  Serial.begin(9600);         // Starting Serial Terminal
  pinMode(echoPin, INPUT);    // Setting the Echo pin as an input to receive the wave
  pinMode(trigPin, OUTPUT);   // Setting the Trigger Pin as an output to send the wave
  pinMode(buzzerPin, OUTPUT); // Setting the buzzer pin as an output to play sound
  pinMode(greenLed, OUTPUT);  // Setting the green LED as an output to display light
  pinMode(redLed, OUTPUT);    // Setting the red LED as an output to display light
}

void loop() {
  float duration, cmDist;      // Distance variables
  
  digitalWrite(trigPin, LOW);  // Turn wave off
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH); // Turn wave on
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);  // Turn wave off
  
  //Use the following functions to calculate the distance in cm
  duration = pulseIn(echoPin, HIGH);
  cmDist = microsecondsToCentimeters(duration);
  
  //Prints results to the serial monitor
  Serial.print(cmDist);
  Serial.println("cm");

  if (fabs(cmDist - NORM_DIST) > ERROR) { // fabs() = float absolute value
    if (insideRoom == false) {
      Serial.println("You're trying to get in");
      authorize();
    } else {
      Serial.println("You're leaving the room");
      insideRoom = false;
      delay(EXIT_TIME * 1000);
    }
  }
}

//Sketch timer execution
void authorize() {
  startTime = millis(); // Starts timer
  boolean check = checkPin();
  if (check == true) {
    correct();
  } else {
    incorrect();
  }
}

void correct() {
  Serial.println("Welcome");
  noTone(buzzerPin);
  insideRoom = true;
  
  //Turn green LED on for three seconds
  digitalWrite(greenLed, HIGH); 
  delay(3000); 
  digitalWrite(greenLed, LOW);
}

void incorrect() {
  Serial.println("Try again");
  ringAlarm();
}

// Checks the four digit pin, returns true if the input matches the CODE
// or if the EMERGENCYKEY is entered. # key resets the input values.
boolean checkPin() {
  String input = "";   // Clear input values
  currTime = millis(); // Updates current timer value
  
  // Check keypad inputs
  while (input.length() < 4 && (currTime - startTime) < (INPUT_CODE_TIME * 1000)) {
    char digit = customKeypad.getKey();
    if (input.equals(EMERGENCYKEY)) {
      return true;
    } else if (digit == '#') {
      input = ""; // Clear input
    } else if (digit != NO_KEY) { // '!=' means 'does not equal'
      input = input + digit;
      Serial.println(digit);
    }
    currTime = millis(); // Update the current time
  }
  
  //You've fully entered a code or the input code time expired
  return input.equals(CODE); 
}

void ringAlarm() {
  float sinVal;  // Define a variable to save sine value
  int toneVal;   // Define a variable to save sound frequency
  int angle = 0; // Define an angle variable for the alarm sine function
  char key = customKeypad.getKey();
  
  //Ring alarm repeatedly
  while (key != '*') {
    sinVal = sin(angle * (PI / 180)); // Calculate the sine of the angle
    toneVal = 2000 + sinVal * 500;    // Calculate sound frequency according to the sine of the angle
    tone(buzzerPin, toneVal);         // Output sound frequency to buzzerPin
    delay(1);
    
    // Blink red LED
    if(angle % 360 == 0) {
      digitalWrite(redLed, HIGH);
    } else if (angle % 360 == 180) {
      digitalWrite(redLed, LOW);
    }
    
    // Check for the escape key, '*', to try inputting the code again
    key = customKeypad.getKey();
    if(key == '*') {
      noTone(buzzerPin);         // Turn off buzzer
      digitalWrite(redLed, LOW); // Turn off red LED
      authorize();
    }
    
    //Increment the angle variable by 1 ('++' means '+= 1')
    angle++;
  }
}

float microsecondsToCentimeters(long microseconds) {
  return microseconds / 29.0 / 2.0;
}
